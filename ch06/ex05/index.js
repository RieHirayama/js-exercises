/*
次の条件を満たすオブジェクトを作成し、for/in ループで順番を確認しなさい。

- 以下のプロパティを持つオブジェクトをプロトタイプとして持つ
    - プロパティ名が数値のプロパティ
    - プロパティ名が文字列のプロパティ
    - 列挙可能なプロパティ
- 以下のプロパティを持つ
    - プロパティ名が数値かつプロトタイプの数値プロパティと同名のプロパティ
    - プロパティ名が数値かつプロトタイプの数値プロパティと同名でないプロパティ
    - プロパティ名が文字列かつプロトタイプの文字列プロパティと同名のプロパティ
    - プロパティ名が文字列かつプロトタイプの文字列プロパティと同名でないプロパティ
    - 列挙不可かつプロトタイプの列挙可能プロパティと同名のプロパティ
*/

const proto = {
  1: 'プロトタイプの数値プロパティ1',
  10: 'プロトタイプの数値プロパティ10',
  'a': 'プロトタイプの文字列プロパティa',
  'z': 'プロトタイプの文字列プロパティz',
  enumerableProp: 'プロトタイプの列挙可能プロパティ'
};

const obj = Object.create(proto, {
  10: { value: 'オブジェクトの数値プロパティ10（同名）', enumerable: true },
  2: { value: 'オブジェクトの数値プロパティ2（非同名）', enumerable: true },
  'z': { value: 'オブジェクトの文字列プロパティz（同名）', enumerable: true },
  'b': { value: 'オブジェクトの文字列プロパティb（非同名）', enumerable: true },
  enumerableProp: { value: 'オブジェクトの列挙不可プロパティ（同名）', enumerable: false }
});

for (const key in obj) {
  console.log(`${key}: ${obj[key]}`);
}
// 出力結果
// 2: オブジェクトの数値プロパティ2（非同名）
// 10: オブジェクトの数値プロパティ10（同名）
// z: オブジェクトの文字列プロパティz（同名）
// b: オブジェクトの文字列プロパティb（非同名）
// 1: プロトタイプの数値プロパティ1
// a: プロトタイプの文字列プロパティa

// プロパティ列挙順
// 1. 自分の数値キー（昇順）
// 2. 自分の文字列キー（定義順）
// 3. プロトタイプの数値キー（昇順）
// 4. プロトタイプの文字列キー（定義順）
// ※ `enumerable: false` としたプロパティは出力されない
