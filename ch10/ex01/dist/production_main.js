(()=>{var t={724:(t,r)=>{const s=(t,r)=>t+r,e=t=>t*t;r.mean=t=>t.reduce(s)/t.length,r.stddev=t=>{const n=r.mean(t);return Math.sqrt(t.map(t=>t-n).map(e).reduce(s)/(t.length-1))}},800:(t,r)=>{class s{has(t){throw new Error("Abstract method")}}class e extends s{get size(){throw new Error("Abstract method")}[Symbol.iterator](){throw new Error("Abstract method")}isEmpty(){return 0===this.size}toString(){return`{${Array.from(this).join(", ")}}`}equals(t){if(!(t instanceof e))return!1;if(this.size!==t.size)return!1;for(const r of this)if(!t.has(r))return!1;return!0}}Symbol.iterator;class n extends e{insert(t){throw new Error("Abstract method")}remove(t){throw new Error("Abstract method")}add(t){for(const r of t)this.insert(r)}subtract(t){for(const r of t)this.remove(r)}intersect(t){for(const r of[...this])t.has(r)||this.remove(r)}}class i extends n{constructor(t){super(),this.max=t,this.n=0,this.numBytes=Math.floor(t/8)+1,this.data=new Uint8Array(this.numBytes)}_valid(t){return Number.isInteger(t)&&t>=0&&t<=this.max}_has(t,r){return 0!==(this.data[t]&i.bits[r])}has(t){if(!this._valid(t))return!1;const r=Math.floor(t/8),s=t%8;return this._has(r,s)}insert(t){if(!this._valid(t))throw new TypeError("Invalid set element: "+t);const r=Math.floor(t/8),s=t%8;this._has(r,s)||(this.data[r]|=i.bits[s],this.n++)}remove(t){if(!this._valid(t))throw new TypeError("Invalid set element: "+t);const r=Math.floor(t/8),s=t%8;this._has(r,s)&&(this.data[r]&=i.masks[s],this.n--)}get size(){return this.n}*[Symbol.iterator](){for(let t=0;t<=this.max;t++)this.has(t)&&(yield t)}}i.bits=new Uint8Array([1,2,4,8,16,32,64,128]),i.masks=new Uint8Array([-2,-3,-5,-9,-17,-33,-65,-129]),r.BitSet=i}},r={};function s(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,s),i.exports}const e=s(724),{BitSet:n}=s(800),i=new n(100);i.insert(10),i.insert(20),i.insert(30);const o=e.mean([...i]);console.log("mean:",o)})();